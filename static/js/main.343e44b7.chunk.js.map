{"version":3,"sources":["components/Header/Header.jsx","utils/parseTime.js","shapes/UserShape.js","components/Message/Message.jsx","utils/defineTypeOfMessage.js","redux/actions/actionConsts.js","redux/reducers/chatReducer.js","redux/rootReducer.js","components/MessagesList/MessagesList.jsx","components/MessageForm/MessageForm.jsx","redux/actions/socketActions.js","components/MessagesController/MessagesController.jsx","components/ContactSelected/ContactSelected.jsx","components/Chat/ChatBody/ChatBody.jsx","components/Contact/Contact.jsx","components/ContactsList/ContactsList.jsx","components/ContactsController/ContactsController.jsx","components/ContactsSearch/ContactsSearch.jsx","assets/left_arrow.svg","components/Chat/ChatSidebar/ChatSidebar.jsx","components/Chat/Chat.jsx","redux/actions/chatActions.js","App.js","utils/createSocket.js","redux/middlewares/socketEvents.js","redux/middlewares/socketMiddleware.js","redux/configureStore.js","webpack:///./src/index.js?b635","components/Chat/Chat.module.scss","components/Message/Message.module.scss","components/Contact/Contact.module.scss","components/ContactSelected/ContactSelected.module.scss","components/ContactsController/ContactsController.module.scss","App.module.scss","components/MessageForm/MessageForm.module.scss","components/ContactsList/ContactsList.module.scss","components/ContactsSearch/ContactsSearch.module.scss","components/Header/Header.module.scss","components/MessagesList/MessagesList.module.scss","components/MessagesController/MessagesController.module.scss"],"names":["Header","className","styles","header","parseTime","PropTypes","shape","id","oneOfType","string","number","isRequired","name","description","image","isOnline","bool","date","Date","toLocaleTimeString","hour","minute","Message","type","author","time","text","messageRef","useRef","useEffect","current","scrollIntoView","behavior","cn","message","sent","received","ref","userName","defineTypeOfMessage","messageAuthorId","userId","CONNECT_SOCKET","SEND_MESSAGE","JOIN_CHAT","ADD_MESSAGE","ADD_MESSAGES","ADD_CONTACTS","SET_USER","SELECT_CONTACT","initialState","messages","contacts","selectedContact","user","chatReducer","state","action","payload","getCurrentUser","getSelectedContact","getContacts","getMessages","rootReducer","combineReducers","MessagesList","useSelector","currentUser","list","map","MessageForm","useState","setMessage","dispatch","useDispatch","onSubmit","event","preventDefault","trim","newMessage","v4","receiver","form","messageInput","value","onChange","target","placeholder","autoComplete","submitButton","MessagesController","controller","ContactSelected","contact","src","alt","information","ChatBody","body","Contact","selectChat","onClick","imageWrapper","online","ContactsList","activeTab","searchField","toggleSidebar","filteredContacts","useMemo","filterResult","filter","toLowerCase","includes","item","ContactsController","setActiveTab","tab","active","ContactsSearch","setSearchField","input","ChatSidebar","isSidebarActive","setIsSidebarActive","prevState","sidebar","sidebarTop","sidebarToggleButton","arrowLeft","sidebarToggleArrow","Chat","chat","setUser","addMessage","App","connectToMessenger","userInfo","userInfoFromLocalStorage","localStorage","getItem","JSON","parse","app","main","createSocket","handshakeQueryData","io","query","socketEvents","handler","store","addContacts","setItem","stringify","addMessages","socketMiddleware","socket","next","socketEvent","on","emit","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.343e44b7.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './Header.module.scss';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={styles.header}>\r\n            <h1>Chat bots 2.0</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","const parseTime = date => {\r\n    return new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n};\r\n\r\nexport default parseTime;\r\n","import PropTypes from 'proptypes';\r\n\r\nexport const UserShape = PropTypes.shape({\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    isOnline: PropTypes.bool.isRequired,\r\n});\r\n","import React, {useEffect, useRef} from 'react';\r\nimport styles from './Message.module.scss';\r\nimport cn from \"classnames\";\r\nimport PropTypes from 'proptypes';\r\nimport {UserShape} from \"../../shapes/UserShape\";\r\nimport parseTime from \"../../utils/parseTime\";\r\n\r\nconst Message = ({type, author, time, text}) => {\r\n    const messageRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (messageRef.current) messageRef.current.scrollIntoView({behavior: 'smooth'});\r\n    });\r\n\r\n    return (\r\n        <div\r\n            className={cn(\r\n                styles.message,\r\n                {\r\n                    [styles.sent]: type === 'sent',\r\n                    [styles.received]: type === 'received',\r\n                }\r\n            )}\r\n            ref={messageRef}\r\n        >\r\n            <div className={styles.header}>\r\n                <p className={styles.userName}>{author.name}</p>\r\n                <p className={styles.time}>{parseTime(time)}</p>\r\n            </div>\r\n\r\n            <p className={styles.text}>\r\n                {text}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nMessage.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n    author: UserShape,\r\n    time: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\r\n    text: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Message;\r\n","const defineTypeOfMessage = (messageAuthorId, userId) => {\r\n    return messageAuthorId === userId ? 'sent': 'received';\r\n};\r\n\r\nexport default defineTypeOfMessage;\r\n","//socket\r\nexport const CONNECT_SOCKET = 'connect_socket';\r\nexport const SEND_MESSAGE = 'send_message';\r\nexport const JOIN_CHAT = 'join_chat';\r\n\r\nexport const RECEIVE_MESSAGE = 'receive_message';\r\nexport const RECEIVE_MESSAGES = 'receive_messages';\r\nexport const RECEIVE_CONTACTS = 'receive_contacts';\r\nexport const RECEIVE_USER = 'receive_created_user';\r\n\r\n//chat\r\nexport const ADD_MESSAGE = 'ADD_MESSAGE';\r\nexport const ADD_MESSAGES = 'ADD_MESSAGES';\r\nexport const ADD_CONTACTS = 'ADD_CONTACTS';\r\n\r\n//user\r\nexport const SET_USER = 'SET_USER';\r\nexport const SELECT_CONTACT = 'SELECT_CONTACT';\r\n","import {ADD_CONTACTS, ADD_MESSAGE, ADD_MESSAGES, SELECT_CONTACT, SET_USER} from \"../actions/actionConsts\";\r\n\r\nconst initialState = {\r\n    messages: [],\r\n    contacts: [],\r\n    selectedContact: null,\r\n    user: {},\r\n};\r\n\r\nconst chatReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_CONTACTS: {\r\n            return {\r\n                ...state,\r\n                contacts: action.payload\r\n            };\r\n        }\r\n        case ADD_MESSAGES: {\r\n            return {\r\n                ...state,\r\n                messages: action.payload,\r\n            };\r\n        }\r\n        case ADD_MESSAGE: {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.payload],\r\n            };\r\n        }\r\n        case SET_USER: {\r\n            return {\r\n                ...state,\r\n                user: action.payload,\r\n            };\r\n        }\r\n        case SELECT_CONTACT: {\r\n            return  {\r\n                ...state,\r\n                selectedContact: action.payload,\r\n            };\r\n        }\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default chatReducer;\r\n","import {combineReducers} from 'redux';\r\nimport chatReducer from \"./reducers/chatReducer\";\r\n\r\nexport const getCurrentUser = state => state.chatReducer.user;\r\nexport const getSelectedContact = state => state.chatReducer.selectedContact;\r\nexport const getContacts = state => state.chatReducer.contacts;\r\nexport const getMessages = state => state.chatReducer.messages;\r\n\r\nconst rootReducer = combineReducers({\r\n    chatReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport Message from \"../Message\";\r\nimport styles from './MessagesList.module.scss';\r\nimport {useSelector} from \"react-redux\";\r\nimport defineTypeOfMessage from \"../../utils/defineTypeOfMessage\";\r\nimport {getCurrentUser, getMessages} from \"../../redux/rootReducer\";\r\n\r\nconst MessagesList = () => {\r\n    const messages = useSelector(getMessages);\r\n    const currentUser = useSelector(getCurrentUser);\r\n\r\n    return (\r\n        <div className={styles.list}>\r\n            {\r\n                messages.map(message => (\r\n                    <Message\r\n                        key={message.id}\r\n                        type={defineTypeOfMessage(message.author.id, currentUser.id)}\r\n                        {...message}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MessagesList;\r\n","import React, {useState} from 'react';\r\nimport styles from './MessageForm.module.scss';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage} from \"../../redux/actions/socketActions\";\r\nimport {getCurrentUser, getSelectedContact} from \"../../redux/rootReducer\";\r\nimport {v4} from \"uuid\";\r\n\r\nconst MessageForm = () => {\r\n    const currentUser = useSelector(getCurrentUser);\r\n    const selectedContact = useSelector(getSelectedContact);\r\n    const [message, setMessage] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        if(message.trim()) {\r\n            const newMessage = {\r\n                id: v4(),\r\n                author: currentUser,\r\n                receiver: selectedContact,\r\n                text: message,\r\n                time: new Date(),\r\n            };\r\n\r\n            dispatch(sendMessage(newMessage));\r\n        }\r\n\r\n        setMessage('');\r\n    };\r\n\r\n    const handleChange = event => {\r\n        setMessage(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={styles.form} >\r\n            <input\r\n                className={styles.messageInput}\r\n                type=\"text\"\r\n                name=\"message\"\r\n                value={message}\r\n                onChange={handleChange}\r\n                placeholder=\"Start chatting!\"\r\n                autoComplete=\"off\"\r\n            />\r\n\r\n            <button type=\"submit\" className={styles.submitButton}>Send message</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default MessageForm;\r\n","import {\r\n    CONNECT_SOCKET,\r\n    JOIN_CHAT,\r\n    SEND_MESSAGE\r\n} from \"./actionConsts\";\r\n\r\nexport const connectSocket = handshakeQueryData => ({\r\n    type: CONNECT_SOCKET,\r\n    payload: handshakeQueryData,\r\n});\r\n\r\nexport const sendMessage = text => ({\r\n    type: SEND_MESSAGE,\r\n    payload: text,\r\n});\r\n\r\nexport const joinChat = userToConnect => ({\r\n   type: JOIN_CHAT,\r\n   payload: userToConnect,\r\n});\r\n","import React from 'react';\r\nimport MessagesList from \"../MessagesList\";\r\nimport MessageForm from \"../MessageForm\";\r\nimport styles from './MessagesController.module.scss';\r\n\r\nconst MessagesController = () => {\r\n    return (\r\n        <div className={styles.controller}>\r\n            <MessagesList/>\r\n            <MessageForm/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MessagesController;\r\n","import React from 'react';\r\nimport styles from './ContactSelected.module.scss';\r\nimport {UserShape} from \"../../shapes/UserShape\";\r\n\r\nconst ContactSelected = ({selectedContact}) => {\r\n    return (\r\n        <div className={styles.contact}>\r\n            <img\r\n                src={selectedContact.image}\r\n                alt={selectedContact.name}\r\n                className={styles.image}\r\n            />\r\n\r\n            <div className={styles.information}>\r\n                <p className={styles.name}>{selectedContact.name}</p>\r\n                <p className={styles.description}>\r\n                    {selectedContact.description}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nContactSelected.propTypes = {\r\n    selectedContact: UserShape,\r\n};\r\n\r\nexport default ContactSelected;\r\n","import React from 'react';\r\nimport MessagesController from \"../../MessagesController\";\r\nimport ContactSelected from \"../../ContactSelected\";\r\nimport {body} from '../Chat.module.scss';\r\nimport {useSelector} from \"react-redux\";\r\nimport {getSelectedContact} from \"../../../redux/rootReducer\";\r\n\r\nconst ChatBody = () => {\r\n    const selectedContact = useSelector(getSelectedContact);\r\n\r\n    return (\r\n        <section className={body}>\r\n            {\r\n                selectedContact && (\r\n                    <>\r\n                        <ContactSelected selectedContact={selectedContact}/>\r\n                        <MessagesController/>\r\n                    </>\r\n                )\r\n            }\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default ChatBody;\r\n","import React from 'react';\r\nimport styles from './Contact.module.scss';\r\nimport cn from \"classnames\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {joinChat} from \"../../redux/actions/socketActions\";\r\nimport {UserShape} from \"../../shapes/UserShape\";\r\n\r\nconst Contact = ({contact}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const selectChat = contact => {\r\n        dispatch(joinChat(contact));\r\n    };\r\n\r\n    return (\r\n        <div className={styles.contact} onClick={() => selectChat(contact)}>\r\n            <div className={cn(\r\n                styles.imageWrapper,\r\n                {\r\n                    [styles.online]: contact.isOnline,\r\n                },\r\n            )}\r\n            >\r\n                <img\r\n                    src={contact.image}\r\n                    alt={contact.name}\r\n                    className={styles.image}\r\n                />\r\n            </div>\r\n\r\n\r\n            <div className={styles.information}>\r\n                <p className={styles.name}>{contact.name}</p>\r\n                <p className={styles.description}>\r\n                    {contact.description}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nContact.propTypes = {\r\n    contact: UserShape,\r\n};\r\n\r\nexport default Contact;\r\n","import React, {useMemo} from 'react';\r\nimport Contact from \"../Contact\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getContacts, getCurrentUser} from \"../../redux/rootReducer\";\r\nimport styles from './ContactsList.module.scss';\r\nimport PropTypes from 'proptypes';\r\n\r\nconst ContactsList = ({activeTab, searchField, toggleSidebar}) => {\r\n    const contacts = useSelector(getContacts);\r\n    const currentUser = useSelector(getCurrentUser);\r\n\r\n    const filteredContacts = useMemo(() => {\r\n        let filterResult = contacts;\r\n\r\n        if (activeTab === 'online') {\r\n            filterResult = filterResult.filter(contact => contact.isOnline);\r\n        }\r\n\r\n        return filterResult\r\n            .filter(contact => contact.id !== currentUser.id)\r\n            .filter(contact => contact.name.toLowerCase().includes(searchField.toLowerCase()));\r\n    }, [contacts, activeTab, searchField]);\r\n\r\n    return (\r\n        <ul className={styles.list}>\r\n            {\r\n\r\n                filteredContacts.map(contact => (\r\n                    <li\r\n                        key={contact.id}\r\n                        className={styles.item}\r\n                        onClick={toggleSidebar}\r\n                    >\r\n                        <Contact contact={contact}/>\r\n                    </li>\r\n                ))\r\n            }\r\n        </ul>\r\n    );\r\n};\r\n\r\nContactsList.propTypes = {\r\n    activeTab: PropTypes.string.isRequired,\r\n    searchField: PropTypes.string.isRequired,\r\n    toggleSidebar: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsList;\r\n","import React from 'react';\r\nimport styles from './ContactsController.module.scss';\r\nimport cn from 'classnames';\r\nimport PropTypes from 'proptypes';\r\n\r\nconst ContactsController = ({activeTab, setActiveTab}) => {\r\n    return (\r\n        <div className={styles.controller}>\r\n            <div\r\n                className={cn(\r\n                    styles.tab,\r\n                    {\r\n                        [styles.active]: activeTab === 'online',\r\n                    },\r\n                )}\r\n                onClick={() => setActiveTab('online')}\r\n            >\r\n                online\r\n            </div>\r\n\r\n            <div\r\n                className={cn(\r\n                    styles.tab,\r\n                    {\r\n                        [styles.active]: activeTab === 'all',\r\n                    },\r\n                )}\r\n                onClick={() => setActiveTab('all')}\r\n            >\r\n                all\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nContactsController.propTypes = {\r\n    activeTab: PropTypes.string.isRequired,\r\n    setActiveTab: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsController;\r\n","import React from 'react';\r\nimport styles from './ContactsSearch.module.scss';\r\nimport PropTypes from 'proptypes';\r\n\r\nconst ContactsSearch = ({searchField, setSearchField}) => {\r\n    const handleChange = event => {\r\n        setSearchField(event.target.value);\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={styles.form}>\r\n            <input\r\n                type=\"text\"\r\n                name=\"search\"\r\n                className={styles.input}\r\n                value={searchField}\r\n                onChange={handleChange}\r\n                placeholder=\"Search...\"\r\n                autoComplete=\"off\"\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nContactsSearch.propTypes = {\r\n    searchField: PropTypes.string.isRequired,\r\n    setSearchField: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsSearch;\r\n","export default __webpack_public_path__ + \"static/media/left_arrow.ccf14356.svg\";","import React, {useState} from 'react';\r\nimport ContactsList from \"../../ContactsList\";\r\nimport ContactsController from \"../../ContactsController\";\r\nimport ContactsSearch from \"../../ContactsSearch\";\r\nimport styles from '../Chat.module.scss';\r\nimport cn from \"classnames\";\r\nimport arrowLeft from '../../../assets/left_arrow.svg';\r\n\r\nconst ChatSidebar = () => {\r\n    const [isSidebarActive, setIsSidebarActive] = useState(false);\r\n    const [activeTab, setActiveTab] = useState('online');\r\n    const [searchField, setSearchField] = useState('');\r\n\r\n    const toggleSidebar = () => {\r\n        setIsSidebarActive(prevState => !prevState);\r\n    };\r\n\r\n    return (\r\n        <aside\r\n            className={cn(\r\n                styles.sidebar,\r\n                {\r\n                    [styles.active]: isSidebarActive,\r\n                },\r\n            )}\r\n        >\r\n            <div className={styles.sidebarTop}>\r\n                <div className={styles.sidebarToggleButton} onClick={toggleSidebar}>\r\n                    <img\r\n                        src={arrowLeft}\r\n                        alt=\"arrow\"\r\n                        className={styles.sidebarToggleArrow}\r\n                    />\r\n                </div>\r\n                <ContactsController activeTab={activeTab} setActiveTab={setActiveTab}/>\r\n                <ContactsList\r\n                    activeTab={activeTab}\r\n                    searchField={searchField}\r\n                    toggleSidebar={toggleSidebar}\r\n                />\r\n            </div>\r\n\r\n            <ContactsSearch searchField={searchField} setSearchField={setSearchField}/>\r\n        </aside>\r\n    );\r\n};\r\n\r\nexport default ChatSidebar;\r\n","import React from 'react';\r\nimport ChatBody from \"./ChatBody\";\r\nimport ChatSidebar from \"./ChatSidebar\";\r\nimport {chat} from './Chat.module.scss';\r\n\r\nconst Chat = () => {\r\n    return (\r\n        <section className={chat}>\r\n            <ChatBody/>\r\n            <ChatSidebar/>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import {\r\n    ADD_CONTACTS,\r\n    ADD_MESSAGE,\r\n    ADD_MESSAGES,\r\n    SELECT_CONTACT,\r\n    SET_USER\r\n} from \"./actionConsts\";\r\n\r\n\r\nexport const setUser = user => ({\r\n    type: SET_USER,\r\n    payload: user,\r\n});\r\n\r\nexport const addContacts = contacts => ({\r\n    type: ADD_CONTACTS,\r\n    payload: contacts,\r\n});\r\n\r\nexport const addMessage = message => ({\r\n    type: ADD_MESSAGE,\r\n    payload: message,\r\n});\r\n\r\nexport const addMessages = messages => ({\r\n    type: ADD_MESSAGES,\r\n    payload: messages,\r\n});\r\n\r\nexport const selectContact = contact => ({\r\n    type: SELECT_CONTACT,\r\n    payload: contact,\r\n});\r\n","import React, {useEffect} from 'react';\nimport './App.module.scss';\nimport Header from \"./components/Header\";\nimport Chat from \"./components/Chat\";\nimport cn from \"classnames\";\nimport styles from './App.module.scss';\nimport {useDispatch} from \"react-redux\";\nimport {connectSocket} from \"./redux/actions/socketActions\";\nimport {setUser} from \"./redux/actions/chatActions\";\n\nconst App = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        connectToMessenger();\n    }, []);\n\n    const connectToMessenger = () => {\n        const userInfoFromLocalStorage = localStorage.getItem('userInfo');\n        let userInfo;\n\n        if(userInfoFromLocalStorage) {\n            userInfo = JSON.parse(userInfoFromLocalStorage);\n        }\n\n        dispatch(setUser(userInfo));\n        dispatch(connectSocket(userInfo));\n    };\n\n    return (\n        <div className={styles.app}>\n            <Header/>\n            <main className={cn(styles.main, 'container')}>\n                <Chat/>\n            </main>\n        </div>\n    );\n};\n\nexport default App;\n","import io from 'socket.io-client';\r\nconst CONNECTION_PORT = process.env.NODE_ENV === 'production' ? 'https://immense-eyrie-03835.herokuapp.com/': 'localhost:5000/';\r\n\r\nconst createSocket = (handshakeQueryData) => io(CONNECTION_PORT, {\r\n    query : handshakeQueryData,\r\n});\r\n\r\nexport default createSocket;\r\n","import {addContacts, addMessage, addMessages, setUser} from \"../actions/chatActions\";\r\nimport {RECEIVE_CONTACTS, RECEIVE_MESSAGE, RECEIVE_MESSAGES, RECEIVE_USER} from \"../actions/actionConsts\";\r\n\r\n\r\nconst onContactsReceive = store => contacts => {\r\n    store.dispatch(addContacts(contacts));\r\n};\r\n\r\nconst onMessageReceive = store => message => {\r\n    store.dispatch(addMessage(message));\r\n};\r\n\r\nconst onMessagesReceive = store => messages => {\r\n    store.dispatch(addMessages(messages));\r\n};\r\n\r\nconst onUserReceive = store => user => {\r\n    store.dispatch(setUser(user));\r\n    localStorage.setItem('userInfo', JSON.stringify(user));\r\n};\r\n\r\nconst socketEvents = [\r\n    {\r\n        event: RECEIVE_CONTACTS,\r\n        handler: onContactsReceive,\r\n    },\r\n    {\r\n        event: RECEIVE_USER,\r\n        handler: onUserReceive,\r\n    },\r\n    {\r\n        event: RECEIVE_MESSAGE,\r\n        handler: onMessageReceive,\r\n    },\r\n    {\r\n        event: RECEIVE_MESSAGES,\r\n        handler: onMessagesReceive,\r\n    },\r\n];\r\n\r\nexport default socketEvents;\r\n","import createSocket from \"../../utils/createSocket\";\r\nimport {\r\n    CONNECT_SOCKET, JOIN_CHAT,\r\n    SEND_MESSAGE\r\n} from \"../actions/actionConsts\";\r\n\r\nimport socketEvents from \"./socketEvents\";\r\nimport {addMessage, selectContact} from \"../actions/chatActions\";\r\n\r\nconst socketMiddleware = () => {\r\n    let socket = null;\r\n\r\n    return store => next => action => {\r\n        switch (action.type) {\r\n            case CONNECT_SOCKET: {\r\n                socket = createSocket(action.payload);\r\n\r\n                for (const socketEvent of socketEvents) {\r\n                    socket.on(socketEvent.event, socketEvent.handler(store));\r\n                }\r\n\r\n                break;\r\n            }\r\n            case SEND_MESSAGE: {\r\n                socket.emit(SEND_MESSAGE, action.payload);\r\n                store.dispatch(addMessage(action.payload));\r\n\r\n                break;\r\n            }\r\n            case JOIN_CHAT: {\r\n                socket.emit(JOIN_CHAT, action.payload);\r\n                store.dispatch(selectContact(action.payload));\r\n\r\n                break;\r\n            }\r\n            default:\r\n                return next(action);\r\n        }\r\n    };\r\n};\r\n\r\nexport default socketMiddleware();\r\n","import rootReducer from \"./rootReducer\";\r\nimport {createStore, applyMiddleware} from \"redux\";\r\nimport socketMiddleware from \"./middlewares/socketMiddleware\";\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(socketMiddleware),\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/configureStore\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"Chat_chat__bntdf\",\"body\":\"Chat_body__bzHhb\",\"sidebar\":\"Chat_sidebar__38N0b\",\"sidebarTop\":\"Chat_sidebarTop__39OU0\",\"sidebarToggleButton\":\"Chat_sidebarToggleButton__Ufhl7\",\"sidebarToggleArrow\":\"Chat_sidebarToggleArrow__3XnJU\",\"active\":\"Chat_active__27YEB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1F6Sp\",\"received\":\"Message_received__2RoFv\",\"header\":\"Message_header__1W_4i\",\"text\":\"Message_text__3C1vz\",\"sent\":\"Message_sent__2IEi5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"Contact_contact__1vkzi\",\"active\":\"Contact_active__GoqAI\",\"imageWrapper\":\"Contact_imageWrapper__3PdCk\",\"online\":\"Contact_online__1qe25\",\"image\":\"Contact_image__1mA0N\",\"information\":\"Contact_information__1Ka3c\",\"name\":\"Contact_name__35GmJ\",\"description\":\"Contact_description__isdHN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactSelected_contact__EO5qQ\",\"image\":\"ContactSelected_image__2FW0H\",\"information\":\"ContactSelected_information__19Xtg\",\"name\":\"ContactSelected_name__2qjGj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controller\":\"ContactsController_controller__15lvh\",\"tab\":\"ContactsController_tab__tgTYU\",\"active\":\"ContactsController_active__3qAAX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__KgHPi\",\"main\":\"App_main__2NTvN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"MessageForm_form__3ul-y\",\"messageInput\":\"MessageForm_messageInput__2THO5\",\"submitButton\":\"MessageForm_submitButton__M4SOe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__20sWu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsSearch_form__etLMa\",\"input\":\"ContactsSearch_input__3xLIO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3FowY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"MessagesList_list__2SQac\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controller\":\"MessagesController_controller__mjjIB\"};"],"sourceRoot":""}