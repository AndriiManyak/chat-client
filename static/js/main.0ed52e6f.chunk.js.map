{"version":3,"sources":["components/Header/Header.jsx","utils/parseTime.js","shapes/UserShape.js","components/Message/Message.jsx","utils/defineTypeOfMessage.js","redux/actions/actionConsts.js","redux/reducers/chatReducer.js","redux/rootReducer.js","components/MessagesList/MessagesList.jsx","components/MessageForm/MessageForm.jsx","redux/actions/socketActions.js","components/MessagesController/MessagesController.jsx","components/ContactSelected/ContactSelected.jsx","components/Chat/ChatBody/ChatBody.jsx","components/Contact/Contact.jsx","components/ContactsList/ContactsList.jsx","components/ContactsController/ContactsController.jsx","components/ContactsSearch/ContactsSearch.jsx","assets/left_arrow.svg","components/Chat/ChatSidebar/ChatSidebar.jsx","components/Chat/Chat.jsx","redux/actions/chatActions.js","App.js","utils/createSocket.js","redux/middlewares/socketEvents.js","redux/middlewares/socketMiddleware.js","redux/configureStore.js","webpack:///./src/index.js?b635","components/Chat/Chat.module.scss","components/Message/Message.module.scss","components/Contact/Contact.module.scss","components/ContactSelected/ContactSelected.module.scss","components/ContactsController/ContactsController.module.scss","components/MessageForm/MessageForm.module.scss","App.module.scss","components/Header/Header.module.scss","components/ContactsList/ContactsList.module.scss","components/ContactsSearch/ContactsSearch.module.scss","components/MessagesList/MessagesList.module.scss","components/MessagesController/MessagesController.module.scss"],"names":["Header","className","styles","header","title","parseTime","PropTypes","shape","id","oneOfType","string","number","isRequired","name","description","image","isOnline","bool","date","Date","toLocaleTimeString","hour","minute","Message","type","author","time","text","seenTime","cn","message","sent","received","userName","seenLabel","toLowerCase","defineTypeOfMessage","messageAuthorId","userId","CONNECT_SOCKET","SEND_MESSAGE","JOIN_CHAT","TYPING_MESSAGE","ADD_MESSAGE","ADD_MESSAGES","ADD_CONTACTS","SET_USER","SELECT_CONTACT","SET_CONTACT_TYPING","initialState","messages","contacts","selectedContact","user","isContactTyping","chatReducer","state","action","payload","getCurrentUser","getSelectedContact","getContacts","getMessages","getIsContactTyping","rootReducer","combineReducers","MessagesList","list","useRef","useSelector","currentUser","useEffect","current","scrollTop","scrollHeight","ref","map","MessageForm","dispatch","useDispatch","useState","setMessage","isCurrentUserTyping","setIsCurrentUserTyping","length","setTimeout","onSubmit","event","preventDefault","trim","newMessage","v4","receiver","form","typingLabel","messageInput","value","onChange","target","placeholder","autoComplete","submitButton","MessagesController","controller","ContactSelected","contact","src","alt","information","ChatBody","body","Contact","selectChat","onClick","imageWrapper","online","ContactsList","activeTab","searchField","toggleSidebar","filteredContacts","useMemo","filterResult","filter","includes","item","ContactsController","setActiveTab","tab","active","ContactsSearch","setSearchField","input","ChatSidebar","isSidebarActive","setIsSidebarActive","prevState","sidebar","sidebarTop","sidebarToggleButton","arrowLeft","sidebarToggleArrow","Chat","chat","setUser","addMessage","setContactIsTyping","isTyping","App","connectToMessenger","userInfo","userInfoFromLocalStorage","localStorage","getItem","JSON","parse","app","main","createSocket","handshakeQueryData","io","query","socketEvents","handler","store","addContacts","setItem","stringify","addMessages","typingTimeout","clearTimeout","socketMiddleware","socket","next","socketEvent","on","emit","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.0ed52e6f.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './Header.module.scss';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={styles.header}>\r\n            <h1 className={styles.title}>Chat bots 2.0</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","const parseTime = date => {\r\n    return new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n};\r\n\r\nexport default parseTime;\r\n","import PropTypes from 'proptypes';\r\n\r\nexport const UserShape = PropTypes.shape({\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    isOnline: PropTypes.bool.isRequired,\r\n});\r\n","import React from 'react';\r\nimport styles from './Message.module.scss';\r\nimport cn from \"classnames\";\r\nimport PropTypes from 'proptypes';\r\nimport {UserShape} from \"../../shapes/UserShape\";\r\nimport parseTime from \"../../utils/parseTime\";\r\n\r\nconst Message = ({type, author, time, text, seenTime}) => {\r\n    return (\r\n        <div\r\n            className={cn(\r\n                styles.message,\r\n                {\r\n                    [styles.sent]: type === 'sent',\r\n                    [styles.received]: type === 'received',\r\n                }\r\n            )}\r\n        >\r\n            <div className={styles.header}>\r\n                <p className={styles.userName}>{author.name}</p>\r\n                <p className={styles.time}>{parseTime(time)}</p>\r\n            </div>\r\n\r\n            <p className={styles.text}>\r\n                {text}\r\n            </p>\r\n\r\n            {\r\n                (type === 'sent' && seenTime) && <div className={styles.seenLabel}>Seen {parseTime(seenTime).toLowerCase()}</div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nMessage.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n    author: UserShape,\r\n    time: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    seenTime: PropTypes.string,\r\n};\r\n\r\nexport default Message;\r\n","const defineTypeOfMessage = (messageAuthorId, userId) => {\r\n    return messageAuthorId === userId ? 'sent': 'received';\r\n};\r\n\r\nexport default defineTypeOfMessage;\r\n","//socket\r\nexport const CONNECT_SOCKET = 'connect_socket';\r\nexport const SEND_MESSAGE = 'send_message';\r\nexport const JOIN_CHAT = 'join_chat';\r\nexport const TYPING_MESSAGE = 'typing_message';\r\n\r\nexport const RECEIVE_MESSAGE = 'receive_message';\r\nexport const RECEIVE_MESSAGES = 'receive_messages';\r\nexport const RECEIVE_CONTACTS = 'receive_contacts';\r\nexport const RECEIVE_USER = 'receive_created_user';\r\nexport const RECEIVE_TYPING_MESSAGE = 'receive_typing_message';\r\n\r\n//chat\r\nexport const ADD_MESSAGE = 'ADD_MESSAGE';\r\nexport const ADD_MESSAGES = 'ADD_MESSAGES';\r\nexport const ADD_CONTACTS = 'ADD_CONTACTS';\r\n\r\n//user\r\nexport const SET_USER = 'SET_USER';\r\nexport const SELECT_CONTACT = 'SELECT_CONTACT';\r\nexport const SET_CONTACT_TYPING = 'SET_CONTACT_TYPING';\r\n","import {\r\n    ADD_CONTACTS,\r\n    ADD_MESSAGE,\r\n    ADD_MESSAGES,\r\n    SELECT_CONTACT,\r\n    SET_CONTACT_TYPING,\r\n    SET_USER\r\n} from \"../actions/actionConsts\";\r\n\r\nconst initialState = {\r\n    messages: [],\r\n    contacts: [],\r\n    selectedContact: null,\r\n    user: {},\r\n    isContactTyping: false,\r\n};\r\n\r\nconst chatReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_CONTACTS: {\r\n            return {\r\n                ...state,\r\n                contacts: action.payload\r\n            };\r\n        }\r\n        case ADD_MESSAGES: {\r\n            return {\r\n                ...state,\r\n                messages: action.payload,\r\n            };\r\n        }\r\n        case ADD_MESSAGE: {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.payload],\r\n            };\r\n        }\r\n        case SET_USER: {\r\n            return {\r\n                ...state,\r\n                user: action.payload,\r\n            };\r\n        }\r\n        case SELECT_CONTACT: {\r\n            return  {\r\n                ...state,\r\n                selectedContact: action.payload,\r\n            };\r\n        }\r\n        case SET_CONTACT_TYPING: {\r\n            return  {\r\n                ...state,\r\n                isContactTyping: action.payload,\r\n            };\r\n        }\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default chatReducer;\r\n","import {combineReducers} from 'redux';\r\nimport chatReducer from \"./reducers/chatReducer\";\r\n\r\nexport const getCurrentUser = state => state.chatReducer.user;\r\nexport const getSelectedContact = state => state.chatReducer.selectedContact;\r\nexport const getContacts = state => state.chatReducer.contacts;\r\nexport const getMessages = state => state.chatReducer.messages;\r\nexport const getIsContactTyping = state => state.chatReducer.isContactTyping;\r\n\r\nconst rootReducer = combineReducers({\r\n    chatReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import React, {useEffect, useRef} from 'react';\r\nimport Message from \"../Message\";\r\nimport styles from './MessagesList.module.scss';\r\nimport {useSelector} from \"react-redux\";\r\nimport defineTypeOfMessage from \"../../utils/defineTypeOfMessage\";\r\nimport {getCurrentUser, getMessages} from \"../../redux/rootReducer\";\r\n\r\nconst MessagesList = () => {\r\n    const list = useRef();\r\n    const messages = useSelector(getMessages);\r\n    const currentUser = useSelector(getCurrentUser);\r\n\r\n    useEffect(() => {\r\n        if (list.current) {\r\n            list.current.scrollTop = list.current.scrollHeight;\r\n        }\r\n    }, [messages]);\r\n\r\n    return (\r\n        <div className={styles.list} ref={list}>\r\n            {\r\n                messages.map(message => (\r\n                    <Message\r\n                        key={message.id}\r\n                        type={defineTypeOfMessage(message.author.id, currentUser.id)}\r\n                        {...message}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MessagesList;\r\n","import React, {useEffect, useState} from 'react';\r\nimport styles from './MessageForm.module.scss';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage, sendTypingMessage} from \"../../redux/actions/socketActions\";\r\nimport {getCurrentUser, getIsContactTyping, getSelectedContact} from \"../../redux/rootReducer\";\r\nimport {v4} from \"uuid\";\r\n\r\nconst MessageForm = () => {\r\n    const dispatch = useDispatch();\r\n    const currentUser = useSelector(getCurrentUser);\r\n    const selectedContact = useSelector(getSelectedContact);\r\n    const isContactTyping = useSelector(getIsContactTyping);\r\n\r\n    const [message, setMessage] = useState('');\r\n    const [isCurrentUserTyping, setIsCurrentUserTyping] = useState(false);\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        if(message.trim()) {\r\n            const newMessage = {\r\n                id: v4(),\r\n                author: currentUser,\r\n                receiver: selectedContact,\r\n                text: message,\r\n                time: new Date(),\r\n            };\r\n\r\n            dispatch(sendMessage(newMessage));\r\n        }\r\n\r\n        setMessage('');\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!isCurrentUserTyping && message.length > 0) {\r\n            setIsCurrentUserTyping(true);\r\n            dispatch(sendTypingMessage());\r\n\r\n            setTimeout(() => {\r\n                setIsCurrentUserTyping(false);\r\n            }, 5000);\r\n        }\r\n    }, [message]);\r\n\r\n    const handleChange = event => {\r\n        setMessage(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={styles.form} >\r\n            {\r\n                isContactTyping && <div className={styles.typingLabel}>{selectedContact.name} is typing...</div>\r\n            }\r\n\r\n            <input\r\n                className={styles.messageInput}\r\n                type=\"text\"\r\n                name=\"message\"\r\n                value={message}\r\n                onChange={handleChange}\r\n                placeholder=\"Start chatting!\"\r\n                autoComplete=\"off\"\r\n            />\r\n\r\n            <button type=\"submit\" className={styles.submitButton}>Send message</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default MessageForm;\r\n","import {\r\n    CONNECT_SOCKET,\r\n    JOIN_CHAT,\r\n    SEND_MESSAGE,\r\n    TYPING_MESSAGE\r\n} from \"./actionConsts\";\r\n\r\nexport const connectSocket = handshakeQueryData => ({\r\n    type: CONNECT_SOCKET,\r\n    payload: handshakeQueryData,\r\n});\r\n\r\nexport const sendMessage = text => ({\r\n    type: SEND_MESSAGE,\r\n    payload: text,\r\n});\r\n\r\nexport const joinChat = userToConnect => ({\r\n   type: JOIN_CHAT,\r\n   payload: userToConnect,\r\n});\r\n\r\nexport const sendTypingMessage = () => ({\r\n    type: TYPING_MESSAGE,\r\n});\r\n","import React from 'react';\r\nimport MessagesList from \"../MessagesList\";\r\nimport MessageForm from \"../MessageForm\";\r\nimport styles from './MessagesController.module.scss';\r\n\r\nconst MessagesController = () => {\r\n    return (\r\n        <div className={styles.controller}>\r\n            <MessagesList/>\r\n            <MessageForm/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MessagesController;\r\n","import React from 'react';\r\nimport styles from './ContactSelected.module.scss';\r\nimport {UserShape} from \"../../shapes/UserShape\";\r\n\r\nconst ContactSelected = ({selectedContact}) => {\r\n    return (\r\n        <div className={styles.contact}>\r\n            <img\r\n                src={selectedContact.image}\r\n                alt={selectedContact.name}\r\n                className={styles.image}\r\n            />\r\n\r\n            <div className={styles.information}>\r\n                <p className={styles.name}>{selectedContact.name}</p>\r\n                <p className={styles.description}>\r\n                    {selectedContact.description}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nContactSelected.propTypes = {\r\n    selectedContact: UserShape,\r\n};\r\n\r\nexport default ContactSelected;\r\n","import React from 'react';\r\nimport MessagesController from \"../../MessagesController\";\r\nimport ContactSelected from \"../../ContactSelected\";\r\nimport {body} from '../Chat.module.scss';\r\nimport {useSelector} from \"react-redux\";\r\nimport {getSelectedContact} from \"../../../redux/rootReducer\";\r\n\r\nconst ChatBody = () => {\r\n    const selectedContact = useSelector(getSelectedContact);\r\n\r\n    return (\r\n        <section className={body}>\r\n            {\r\n                selectedContact && (\r\n                    <>\r\n                        <ContactSelected selectedContact={selectedContact}/>\r\n                        <MessagesController/>\r\n                    </>\r\n                )\r\n            }\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default ChatBody;\r\n","import React from 'react';\r\nimport styles from './Contact.module.scss';\r\nimport cn from \"classnames\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {joinChat} from \"../../redux/actions/socketActions\";\r\nimport {UserShape} from \"../../shapes/UserShape\";\r\n\r\nconst Contact = ({contact}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const selectChat = contact => {\r\n        dispatch(joinChat(contact));\r\n    };\r\n\r\n    return (\r\n        <div className={styles.contact} onClick={() => selectChat(contact)}>\r\n            <div className={cn(\r\n                styles.imageWrapper,\r\n                {\r\n                    [styles.online]: contact.isOnline,\r\n                },\r\n            )}\r\n            >\r\n                <img\r\n                    src={contact.image}\r\n                    alt={contact.name}\r\n                    className={styles.image}\r\n                />\r\n            </div>\r\n\r\n\r\n            <div className={styles.information}>\r\n                <p className={styles.name}>{contact.name}</p>\r\n                <p className={styles.description}>\r\n                    {contact.description}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nContact.propTypes = {\r\n    contact: UserShape,\r\n};\r\n\r\nexport default Contact;\r\n","import React, {useMemo} from 'react';\r\nimport Contact from \"../Contact\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getContacts, getCurrentUser} from \"../../redux/rootReducer\";\r\nimport styles from './ContactsList.module.scss';\r\nimport PropTypes from 'proptypes';\r\n\r\nconst ContactsList = ({activeTab, searchField, toggleSidebar}) => {\r\n    const contacts = useSelector(getContacts);\r\n    const currentUser = useSelector(getCurrentUser);\r\n\r\n    const filteredContacts = useMemo(() => {\r\n        let filterResult = contacts;\r\n\r\n        if (activeTab === 'online') {\r\n            filterResult = filterResult.filter(contact => contact.isOnline);\r\n        }\r\n\r\n        return filterResult\r\n            .filter(contact => contact.id !== currentUser.id)\r\n            .filter(contact => contact.name.toLowerCase().includes(searchField.toLowerCase()));\r\n    }, [contacts, activeTab, searchField]);\r\n\r\n    return (\r\n        <ul className={styles.list}>\r\n            {\r\n\r\n                filteredContacts.map(contact => (\r\n                    <li\r\n                        key={contact.id}\r\n                        className={styles.item}\r\n                        onClick={toggleSidebar}\r\n                    >\r\n                        <Contact contact={contact}/>\r\n                    </li>\r\n                ))\r\n            }\r\n        </ul>\r\n    );\r\n};\r\n\r\nContactsList.propTypes = {\r\n    activeTab: PropTypes.string.isRequired,\r\n    searchField: PropTypes.string.isRequired,\r\n    toggleSidebar: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsList;\r\n","import React from 'react';\r\nimport styles from './ContactsController.module.scss';\r\nimport cn from 'classnames';\r\nimport PropTypes from 'proptypes';\r\n\r\nconst ContactsController = ({activeTab, setActiveTab}) => {\r\n    return (\r\n        <div className={styles.controller}>\r\n            <div\r\n                className={cn(\r\n                    styles.tab,\r\n                    {\r\n                        [styles.active]: activeTab === 'online',\r\n                    },\r\n                )}\r\n                onClick={() => setActiveTab('online')}\r\n            >\r\n                online\r\n            </div>\r\n\r\n            <div\r\n                className={cn(\r\n                    styles.tab,\r\n                    {\r\n                        [styles.active]: activeTab === 'all',\r\n                    },\r\n                )}\r\n                onClick={() => setActiveTab('all')}\r\n            >\r\n                all\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nContactsController.propTypes = {\r\n    activeTab: PropTypes.string.isRequired,\r\n    setActiveTab: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsController;\r\n","import React from 'react';\r\nimport styles from './ContactsSearch.module.scss';\r\nimport PropTypes from 'proptypes';\r\n\r\nconst ContactsSearch = ({searchField, setSearchField}) => {\r\n    const handleChange = event => {\r\n        setSearchField(event.target.value);\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={styles.form}>\r\n            <input\r\n                type=\"text\"\r\n                name=\"search\"\r\n                className={styles.input}\r\n                value={searchField}\r\n                onChange={handleChange}\r\n                placeholder=\"Search...\"\r\n                autoComplete=\"off\"\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nContactsSearch.propTypes = {\r\n    searchField: PropTypes.string.isRequired,\r\n    setSearchField: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsSearch;\r\n","export default __webpack_public_path__ + \"static/media/left_arrow.ccf14356.svg\";","import React, {useState} from 'react';\r\nimport ContactsList from \"../../ContactsList\";\r\nimport ContactsController from \"../../ContactsController\";\r\nimport ContactsSearch from \"../../ContactsSearch\";\r\nimport styles from '../Chat.module.scss';\r\nimport cn from \"classnames\";\r\nimport arrowLeft from '../../../assets/left_arrow.svg';\r\n\r\nconst ChatSidebar = () => {\r\n    const [isSidebarActive, setIsSidebarActive] = useState(false);\r\n    const [activeTab, setActiveTab] = useState('online');\r\n    const [searchField, setSearchField] = useState('');\r\n\r\n    const toggleSidebar = () => {\r\n        setIsSidebarActive(prevState => !prevState);\r\n    };\r\n\r\n    return (\r\n        <aside\r\n            className={cn(\r\n                styles.sidebar,\r\n                {\r\n                    [styles.active]: isSidebarActive,\r\n                },\r\n            )}\r\n        >\r\n            <div className={styles.sidebarTop}>\r\n                <div className={styles.sidebarToggleButton} onClick={toggleSidebar}>\r\n                    <img\r\n                        src={arrowLeft}\r\n                        alt=\"arrow\"\r\n                        className={styles.sidebarToggleArrow}\r\n                    />\r\n                </div>\r\n                <ContactsController activeTab={activeTab} setActiveTab={setActiveTab}/>\r\n                <ContactsList\r\n                    activeTab={activeTab}\r\n                    searchField={searchField}\r\n                    toggleSidebar={toggleSidebar}\r\n                />\r\n            </div>\r\n\r\n            <ContactsSearch searchField={searchField} setSearchField={setSearchField}/>\r\n        </aside>\r\n    );\r\n};\r\n\r\nexport default ChatSidebar;\r\n","import React from 'react';\r\nimport ChatBody from \"./ChatBody\";\r\nimport ChatSidebar from \"./ChatSidebar\";\r\nimport {chat} from './Chat.module.scss';\r\n\r\nconst Chat = () => {\r\n    return (\r\n        <section className={chat}>\r\n            <ChatBody/>\r\n            <ChatSidebar/>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import {\r\n    ADD_CONTACTS,\r\n    ADD_MESSAGE,\r\n    ADD_MESSAGES,\r\n    SELECT_CONTACT, SET_CONTACT_TYPING,\r\n    SET_USER\r\n} from \"./actionConsts\";\r\n\r\n\r\nexport const setUser = user => ({\r\n    type: SET_USER,\r\n    payload: user,\r\n});\r\n\r\nexport const addContacts = contacts => ({\r\n    type: ADD_CONTACTS,\r\n    payload: contacts,\r\n});\r\n\r\nexport const addMessage = message => ({\r\n    type: ADD_MESSAGE,\r\n    payload: message,\r\n});\r\n\r\nexport const addMessages = messages => ({\r\n    type: ADD_MESSAGES,\r\n    payload: messages,\r\n});\r\n\r\nexport const selectContact = contact => ({\r\n    type: SELECT_CONTACT,\r\n    payload: contact,\r\n});\r\n\r\nexport const setContactIsTyping = isTyping => ({\r\n    type: SET_CONTACT_TYPING,\r\n    payload: isTyping,\r\n});\r\n","import React, {useEffect} from 'react';\nimport './App.module.scss';\nimport Header from \"./components/Header\";\nimport Chat from \"./components/Chat\";\nimport cn from \"classnames\";\nimport styles from './App.module.scss';\nimport {useDispatch} from \"react-redux\";\nimport {connectSocket} from \"./redux/actions/socketActions\";\nimport {setUser} from \"./redux/actions/chatActions\";\n\nconst App = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        connectToMessenger();\n    }, []);\n\n    const connectToMessenger = () => {\n        const userInfoFromLocalStorage = localStorage.getItem('userInfo');\n        let userInfo;\n\n        if(userInfoFromLocalStorage) {\n            userInfo = JSON.parse(userInfoFromLocalStorage);\n        }\n\n        dispatch(setUser(userInfo));\n        dispatch(connectSocket(userInfo));\n    };\n\n    return (\n        <div className={styles.app}>\n            <Header/>\n            <main className={cn(styles.main, 'container')}>\n                <Chat/>\n            </main>\n        </div>\n    );\n};\n\nexport default App;\n","import io from 'socket.io-client';\r\nconst CONNECTION_PORT = process.env.NODE_ENV === 'production' ? 'https://immense-eyrie-03835.herokuapp.com/': 'localhost:5000/';\r\n\r\nconst createSocket = (handshakeQueryData) => io(CONNECTION_PORT, {\r\n    query : handshakeQueryData,\r\n});\r\n\r\nexport default createSocket;\r\n","import {addContacts, addMessage, addMessages, setContactIsTyping, setUser} from \"../actions/chatActions\";\r\nimport {\r\n    RECEIVE_CONTACTS,\r\n    RECEIVE_MESSAGE,\r\n    RECEIVE_MESSAGES,\r\n    RECEIVE_TYPING_MESSAGE,\r\n    RECEIVE_USER\r\n} from \"../actions/actionConsts\";\r\n\r\n\r\nconst onContactsReceive = store => contacts => {\r\n    store.dispatch(addContacts(contacts));\r\n};\r\n\r\nconst onMessageReceive = store => message => {\r\n    store.dispatch(addMessage(message));\r\n};\r\n\r\nconst onMessagesReceive = store => messages => {\r\n    store.dispatch(addMessages(messages));\r\n};\r\n\r\nconst onUserReceive = store => user => {\r\n    store.dispatch(setUser(user));\r\n    localStorage.setItem('userInfo', JSON.stringify(user));\r\n};\r\n\r\nconst onTypingMessageReceive = store => {\r\n    let typingTimeout;\r\n\r\n    return () => {\r\n        store.dispatch(setContactIsTyping(true));\r\n\r\n        if (typingTimeout) {\r\n            clearTimeout(typingTimeout);\r\n        }\r\n\r\n        typingTimeout = setTimeout(() => {\r\n            store.dispatch(setContactIsTyping(false));\r\n        }, 5000);\r\n    };\r\n};\r\n\r\nconst socketEvents = [\r\n    {\r\n        event: RECEIVE_CONTACTS,\r\n        handler: onContactsReceive,\r\n    },\r\n    {\r\n        event: RECEIVE_USER,\r\n        handler: onUserReceive,\r\n    },\r\n    {\r\n        event: RECEIVE_MESSAGE,\r\n        handler: onMessageReceive,\r\n    },\r\n    {\r\n        event: RECEIVE_MESSAGES,\r\n        handler: onMessagesReceive,\r\n    },\r\n    {\r\n        event: RECEIVE_TYPING_MESSAGE,\r\n        handler: onTypingMessageReceive,\r\n    }\r\n];\r\n\r\nexport default socketEvents;\r\n","import createSocket from \"../../utils/createSocket\";\r\nimport {\r\n    CONNECT_SOCKET,\r\n    JOIN_CHAT,\r\n    SEND_MESSAGE,\r\n    TYPING_MESSAGE\r\n} from \"../actions/actionConsts\";\r\n\r\nimport socketEvents from \"./socketEvents\";\r\nimport {addMessage, selectContact} from \"../actions/chatActions\";\r\n\r\nconst socketMiddleware = () => {\r\n    let socket = null;\r\n\r\n    return store => next => action => {\r\n        switch (action.type) {\r\n            case CONNECT_SOCKET: {\r\n                socket = createSocket(action.payload);\r\n\r\n                for (const socketEvent of socketEvents) {\r\n                    socket.on(socketEvent.event, socketEvent.handler(store));\r\n                }\r\n\r\n                break;\r\n            }\r\n            case SEND_MESSAGE: {\r\n                socket.emit(SEND_MESSAGE, action.payload);\r\n                store.dispatch(addMessage(action.payload));\r\n\r\n                break;\r\n            }\r\n            case JOIN_CHAT: {\r\n                socket.emit(JOIN_CHAT, action.payload);\r\n                store.dispatch(selectContact(action.payload));\r\n\r\n                break;\r\n            }\r\n            case TYPING_MESSAGE: {\r\n                socket.emit(TYPING_MESSAGE);\r\n\r\n                break;\r\n            }\r\n            default:\r\n                return next(action);\r\n        }\r\n    };\r\n};\r\n\r\nexport default socketMiddleware();\r\n","import rootReducer from \"./rootReducer\";\r\nimport {createStore, applyMiddleware} from \"redux\";\r\nimport socketMiddleware from \"./middlewares/socketMiddleware\";\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(socketMiddleware),\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/configureStore\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"Chat_chat__bntdf\",\"body\":\"Chat_body__bzHhb\",\"sidebar\":\"Chat_sidebar__38N0b\",\"sidebarTop\":\"Chat_sidebarTop__39OU0\",\"sidebarToggleButton\":\"Chat_sidebarToggleButton__Ufhl7\",\"sidebarToggleArrow\":\"Chat_sidebarToggleArrow__3XnJU\",\"active\":\"Chat_active__27YEB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1F6Sp\",\"received\":\"Message_received__2RoFv\",\"header\":\"Message_header__1W_4i\",\"text\":\"Message_text__3C1vz\",\"sent\":\"Message_sent__2IEi5\",\"userName\":\"Message_userName__1zL7V\",\"time\":\"Message_time__30Ujx\",\"seenLabel\":\"Message_seenLabel__22C_q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"Contact_contact__1vkzi\",\"active\":\"Contact_active__GoqAI\",\"imageWrapper\":\"Contact_imageWrapper__3PdCk\",\"online\":\"Contact_online__1qe25\",\"image\":\"Contact_image__1mA0N\",\"information\":\"Contact_information__1Ka3c\",\"name\":\"Contact_name__35GmJ\",\"description\":\"Contact_description__isdHN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactSelected_contact__EO5qQ\",\"image\":\"ContactSelected_image__2FW0H\",\"information\":\"ContactSelected_information__19Xtg\",\"name\":\"ContactSelected_name__2qjGj\",\"description\":\"ContactSelected_description__njTOV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controller\":\"ContactsController_controller__15lvh\",\"tab\":\"ContactsController_tab__tgTYU\",\"active\":\"ContactsController_active__3qAAX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"MessageForm_form__3ul-y\",\"typingLabel\":\"MessageForm_typingLabel__3PrXV\",\"messageInput\":\"MessageForm_messageInput__2THO5\",\"submitButton\":\"MessageForm_submitButton__M4SOe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__KgHPi\",\"main\":\"App_main__2NTvN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3FowY\",\"title\":\"Header_title__3a9gv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__20sWu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsSearch_form__etLMa\",\"input\":\"ContactsSearch_input__3xLIO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"MessagesList_list__2SQac\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controller\":\"MessagesController_controller__mjjIB\"};"],"sourceRoot":""}